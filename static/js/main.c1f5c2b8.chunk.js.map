{"version":3,"sources":["DataProvider.js","Bounce.js","App.js","serviceWorker.js","index.js"],"names":["dataProvider","onHeightChange","onCorChange","onSubmit","type","onChange","placeholder","onClick","Bounce","bounce","App","event","console","log","setState","Height","target","value","Cor","i","h","state","c","arr","t","Math","pow","time","push","toFixed","k","data","labels","datasets","label","backgroundColor","style","position","width","height","DataProvider","this","options","responsive","scales","yAxes","scaleLabel","display","labelString","xAxes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MAiBeA,EAdM,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,eAAeC,EAAwB,EAAxBA,YAAYC,EAAY,EAAZA,SACjD,OACC,6BACD,2BAAOC,KAAK,OAAMC,SAAYJ,EACvBK,YAAY,yBACZ,2BAAOF,KAAK,OAAMC,SAAYH,EAC9BI,YAAY,qCACV,4BAAQF,KAAK,SACRG,QAASJ,GADd,YCGKK,EAXA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAChB,OACK,6EAC0CA,KC6GjCC,E,kDA1Gf,aAAc,IAAD,8BACX,gBAkBFT,eAAe,SAACU,GACdC,QAAQC,MACR,EAAKC,SAAS,CACVC,OAAOJ,EAAMK,OAAOC,SAtBb,EAyBbf,YAAY,SAACS,GACX,EAAKG,SAAS,CACZI,IAAIP,EAAMK,OAAOC,SA3BR,EA8Bbd,SAAS,WACP,IAAIgB,EAAG,EACHC,EAAI,EAAKC,MAAMN,OACbO,EAAG,EAAKD,MAAMH,IACdK,EAAI,CAACH,EAAE,GACTI,EAAIC,KAAKC,IAAK,EAAEN,EAAE,GAAI,IAC1BR,QAAQC,IAAIW,GACZ,IAAMG,EAAM,CAAC,GAGb,IAFCA,EAAKC,KAAKJ,EAAEK,QAAQ,IAEfT,EAAE,KAAK,CACXD,IACAC,EAAEK,KAAKC,IAAIJ,EAAE,GAAGF,EAChBG,EAAIK,KAAKR,GACTG,EAAIK,KAAK,GACT,IAAIE,EAAIL,KAAKC,IAAK,EAAEN,EAAE,GAAI,IAC1BR,QAAQC,IAAIiB,GACZN,GAAIM,EACJH,EAAKC,KAAKJ,EAAEK,QAAQ,IACpBjB,QAAQC,IAAIW,GACZA,GAAIM,EACJH,EAAKC,KAAKJ,EAAEK,QAAQ,IAGtB,EAAKf,SAAS,CACZL,OAAOU,EACPY,KAAK,CACHC,OAAO,GAAD,OAAKL,GACXM,SAAW,CACX,CACEC,MAAQ,YACRC,gBAAiB,uBACjBJ,KAAK,GAAD,OAAMR,SA5DhB,EAAKF,MAAM,CACTZ,OAAO,EACPM,OAAO,EACPG,IAAI,EACJa,KAAM,CACJC,OAAO,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAC3CC,SAAW,CACX,CACEC,MAAQ,YACRC,gBAAiB,uBACjBJ,KAAM,OAZD,E,qDAwEV,OACC,yBAAKK,MAAO,CAACC,SAAS,WAAYC,MAAM,OAAOC,OAAO,SACtD,8CACA,kBAACC,EAAD,CACCvC,eAAgBwC,KAAKxC,eACrBC,YAAeuC,KAAKvC,YACpBC,SAAWsC,KAAKtC,WACjB,kBAAC,EAAD,CAAQM,OAAQgC,KAAKpB,MAAMZ,SAC3B,kBAAC,IAAD,CACGiC,QAAU,CACTC,YAAW,EACVC,OAAQ,CACJC,MAAO,CAAC,CACJC,WAAY,CACNC,SAAS,EACVC,YAAa,qBAG/BC,MAAO,CAAC,CACKH,WAAY,CACNC,SAAS,EACVC,YAAa,mBAK7BjB,KAAMU,KAAKpB,MAAMU,Y,GAnGLmB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,a","file":"static/js/main.c1f5c2b8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst dataProvider = ({onHeightChange,onCorChange,onSubmit})=>{\r\n\treturn (\r\n\t\t<div>\r\n <input type='text'onChange = {onHeightChange} \r\n        placeholder='enter initial height'/>\r\n        <input type='text'onChange = {onCorChange} \r\n        placeholder='enter coefficient of restitution'/>\r\n          <button type=\"submit\"\r\n               onClick={onSubmit}>Detect</button>\r\n        </div>\r\n)\r\n}\r\n\r\n\r\nexport default dataProvider","import React  from 'react';\r\n\r\nconst Bounce = ({bounce}) => {\r\n\treturn (\r\n      <div >\r\n      {`Total Number of Times Ball Bounced is ${bounce}`}\r\n\r\n      </div>\r\n\t\t);\r\n\r\n}\r\n\r\n\r\nexport default Bounce","import React , {Component} from 'react';\nimport './App.css';\nimport {Line} from 'react-chartjs-2';\nimport DataProvider from './DataProvider';\nimport Bounce from './Bounce';\n\n\nclass App extends Component {\nconstructor(){\n  super();\n  this.state={\n    bounce:0,\n    Height:0,\n    Cor:0,\n    data :{\n      labels:[\"t1\",\"t2\",\"t3\",\"t4\",\"t5\",\"t6\",\"t7\",\"t8\"],\n      datasets : [\n      {\n        label : \"Ball Path\",\n        backgroundColor: \"rgba(255,0,255,0.75)\",\n        data: []\n\n      }]\n    }\n  }\n}\n\nonHeightChange=(event)=>{\n  console.log()\n  this.setState({\n      Height:event.target.value\n  })\n}\nonCorChange=(event)=>{\n  this.setState({\n    Cor:event.target.value\n  })\n}\nonSubmit=()=>{\n  var i =1;\n  var h = this.state.Height;\n  const c =this.state.Cor;\n  const arr=[h,0];\n  var t = Math.pow((2*h/10),0.5);\n  console.log(t);\n  const time =[0];\n   time.push(t.toFixed(3));\n\n  while(h>0.01){\n    i++;\n    h=Math.pow(c,2)*h;\n    arr.push(h);\n    arr.push(0);\n    var k = Math.pow((2*h/10),0.5);\n    console.log(k);\n    t=t+k;\n    time.push(t.toFixed(3));\n    console.log(t);\n    t=t+k;\n    time.push(t.toFixed(3));\n\n  }\n  this.setState({\n    bounce:i,\n    data:{\n      labels:[...time],\n      datasets : [\n      {\n        label : \"Ball Path\",\n        backgroundColor: \"rgba(255,0,255,0.75)\",\n        data: [...arr]\n\n      }]\n    }\n  })\n\n\n}\n\n  render(){\n   return ( \n    <div style={{position:\"relative\", width:\"80vw\",height:\"80vh\"}}>\n    <h1 > Bouncy Balll </h1>\n    <DataProvider \n     onHeightChange={this.onHeightChange}\n     onCorChange = {this.onCorChange} \n     onSubmit ={this.onSubmit}  />\n    <Bounce bounce={this.state.bounce}/>\n    <Line \n       options= {{\n        responsive:true,\n         scales: {\n             yAxes: [{\n                 scaleLabel: {\n                       display: true,\n                      labelString: 'Height in meter'\n        }\n    }],\n    xAxes: [{\n                 scaleLabel: {\n                       display: true,\n                      labelString: 'Time in sec'\n        }\n    }]\n  }   \n      }}\n      data={this.state.data}\n      />\n    </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}